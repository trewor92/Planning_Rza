import React, { Component } from 'react';
import { FaFile, FaFolder, FaFolderOpen, FaChevronDown, FaChevronRight } from 'react-icons/fa';
import styled from 'styled-components';
import * as R from 'ramda'
import PropTypes from 'prop-types';
import {connect} from 'react-redux'
import {getChildTreeElements} from 'selectors'
import {changeFolderCondition, fetchChildTreeData} from 'actions'
import { NavLink } from 'react-router-dom';

const getPaddingLeft = (level, type) => {
  let paddingLeft = level * 20;
  if (type === 'file') paddingLeft += 20;
  return paddingLeft;
}

const StyledTreeNode = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 5px 8px;
  padding-left: ${props => getPaddingLeft(props.level, props.type)}px;
  &:hover {
    background: lightgray;
  }`;

const NodeIcon = styled.div`
  font-size: 12px;
  margin-right: ${props => props.marginRight ? props.marginRight : 5}px;
`;

class TreeNode extends Component
{
  getLinkPath = (node) => R.prop('id', node);
  getNodeLabel = (node) => R.prop('name',node);
  onToggle = (node) =>{
    if (node.isFolder)
    {
      if (!node.children)
      {
        this.props.fetchChildTreeData(node)
      }
      this.props.changeFolderCondition(node)
    }
  }
render() {
  const { node, childs, level} = this.props;
  return (
    <React.Fragment>
      <StyledTreeNode level={level} type={(node.isFolder?"Folder":"File")}>
        <NodeIcon onClick={() => this.onToggle(node)}>
          { node.isFolder && (node.isOpen ? <FaChevronDown /> : <FaChevronRight />) }
        </NodeIcon>
        <NodeIcon marginRight={10}>
          { !node.isFolder && <FaFile /> }
          { node.isFolder && node.isOpen === true && <FaFolderOpen /> }
          { node.isFolder && !node.isOpen && <FaFolder /> }
        </NodeIcon>
        <span role="button">
          <NavLink className="text-decoration-non text-body"
                   exact to = {this.getLinkPath(node)}
                   activeClassName="font-weight-bold"
                   >
          { this.getNodeLabel(node) }
          </NavLink>
        </span>
      </StyledTreeNode>
      { node.isOpen && childs.map(childNode => (
        <TreeNodeRedux
          key={childNode.id}
          node={childNode}
          level={level + 1}
        />
      ))}
    </React.Fragment>
  );
}
}

TreeNode.propTypes = {
  node: PropTypes.object.isRequired,
  level: PropTypes.number.isRequired,
};

TreeNode.defaultProps = {
  level: 0,
};

const mapStateToProps = (state, ownProps) => ({
  childs: getChildTreeElements(state, ownProps)
})

const mapDispatchProps={
  changeFolderCondition,
  fetchChildTreeData
}
const TreeNodeRedux = connect(mapStateToProps, mapDispatchProps)(TreeNode)
export default TreeNodeRedux
